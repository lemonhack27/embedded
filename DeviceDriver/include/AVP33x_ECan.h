/******************************************************************************
文件名                     : AVP33x_ECan.h
作者                         : 湖南进芯电子科技有限公司
功能描述                 : AVP33x芯片eCAN寄存器定义
创建时间                 : 06-25-2019
版本                         : V1.0
修订时间                 :
修订内容                 :
*******************************************************************************/

#ifndef AVP33x_ECAN_H
#define AVP33x_ECAN_H


#ifdef __cplusplus
extern "C" {
#endif


/* --------------------------------------------------- */
/* eCAN控制和状态寄存器                                                                                                                */
/* ----------------------------------------------------*/
//----------------------------------------------------
/* eCAN邮箱使能寄存器 (CANME)位定义                                                                                  */
struct  CANME_BITS {        // 位描述
    Uint16      ME0:1;      // 0   能邮箱0使能位
    Uint16      ME1:1;      // 1   能邮箱1使能位
    Uint16      ME2:1;      // 2   能邮箱2使能位
    Uint16      ME3:1;      // 3   能邮箱3使能位
    Uint16      ME4:1;      // 4   能邮箱4使能位
    Uint16      ME5:1;      // 5   能邮箱5使能位
    Uint16      ME6:1;      // 6   能邮箱6使能位
    Uint16      ME7:1;      // 7   能邮箱7使能位
    Uint16      ME8:1;      // 8   能邮箱8使能位
    Uint16      ME9:1;      // 9   能邮箱9使能位
    Uint16      ME10:1;     // 10  能邮箱10使能位
    Uint16      ME11:1;     // 11  能邮箱11使能位
    Uint16      ME12:1;     // 12  能邮箱12使能位
    Uint16      ME13:1;     // 13  能邮箱13使能位
    Uint16      ME14:1;     // 14  能邮箱14使能位
    Uint16      ME15:1;     // 15  能邮箱15使能位
    Uint16      ME16:1;     // 16  能邮箱16使能位
    Uint16      ME17:1;     // 17  能邮箱17使能位
    Uint16      ME18:1;     // 18  能邮箱18使能位
    Uint16      ME19:1;     // 19  能邮箱19使能位
    Uint16      ME20:1;     // 20  能邮箱20使能位
    Uint16      ME21:1;     // 21  能邮箱21使能位
    Uint16      ME22:1;     // 22  能邮箱22使能位
    Uint16      ME23:1;     // 23  能邮箱23使能位
    Uint16      ME24:1;     // 24  能邮箱24使能位
    Uint16      ME25:1;     // 25  能邮箱25使能位
    Uint16      ME26:1;     // 26  能邮箱26使能位
    Uint16      ME27:1;     // 27  能邮箱27使能位
    Uint16      ME28:1;     // 28  能邮箱28使能位
    Uint16      ME29:1;     // 29  能邮箱29使能位
    Uint16      ME30:1;     // 30  能邮箱30使能位
    Uint16      ME31:1;     // 31  能邮箱31使能位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANME_REG {
    Uint32             all;
    struct CANME_BITS  bit;
};

//----------------------------------------------------
/* 邮箱方向控制寄存器(CANMD)位定义 */
struct  CANMD_BITS {        // 位描述
    Uint16      MD0:1;      // 0   0：发送邮箱；1：接收邮箱
    Uint16      MD1:1;      // 1   0：发送邮箱；1：接收邮箱
    Uint16      MD2:1;      // 2   0：发送邮箱；1：接收邮箱
    Uint16      MD3:1;      // 3   0：发送邮箱；1：接收邮箱
    Uint16      MD4:1;      // 4   0：发送邮箱；1：接收邮箱
    Uint16      MD5:1;      // 5   0：发送邮箱；1：接收邮箱
    Uint16      MD6:1;      // 6   0：发送邮箱；1：接收邮箱
    Uint16      MD7:1;      // 7   0：发送邮箱；1：接收邮箱
    Uint16      MD8:1;      // 8   0：发送邮箱；1：接收邮箱
    Uint16      MD9:1;      // 9   0：发送邮箱；1：接收邮箱
    Uint16      MD10:1;     // 10  0：发送邮箱；1：接收邮箱
    Uint16      MD11:1;     // 11  0：发送邮箱；1：接收邮箱
    Uint16      MD12:1;     // 12  0：发送邮箱；1：接收邮箱
    Uint16      MD13:1;     // 13  0：发送邮箱；1：接收邮箱
    Uint16      MD14:1;     // 14  0：发送邮箱；1：接收邮箱
    Uint16      MD15:1;     // 15  0：发送邮箱；1：接收邮箱
    Uint16      MD16:1;     // 16  0：发送邮箱；1：接收邮箱
    Uint16      MD17:1;     // 17  0：发送邮箱；1：接收邮箱
    Uint16      MD18:1;     // 18  0：发送邮箱；1：接收邮箱
    Uint16      MD19:1;     // 19  0：发送邮箱；1：接收邮箱
    Uint16      MD20:1;     // 20  0：发送邮箱；1：接收邮箱
    Uint16      MD21:1;     // 21  0：发送邮箱；1：接收邮箱
    Uint16      MD22:1;     // 22  0：发送邮箱；1：接收邮箱
    Uint16      MD23:1;     // 23  0：发送邮箱；1：接收邮箱
    Uint16      MD24:1;     // 24  0：发送邮箱；1：接收邮箱
    Uint16      MD25:1;     // 25  0：发送邮箱；1：接收邮箱
    Uint16      MD26:1;     // 26  0：发送邮箱；1：接收邮箱
    Uint16      MD27:1;     // 27  0：发送邮箱；1：接收邮箱
    Uint16      MD28:1;     // 28  0：发送邮箱；1：接收邮箱
    Uint16      MD29:1;     // 29  0：发送邮箱；1：接收邮箱
    Uint16      MD30:1;     // 30  0：发送邮箱；1：接收邮箱
    Uint16      MD31:1;     // 31  0：发送邮箱；1：接收邮箱
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMD_REG {
    Uint32             all;
    struct CANMD_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送请求设置寄存器(CANTRS)位定义 */
struct  CANTRS_BITS {       // 位描述
    Uint16      TRS0:1;     // 0   邮箱0发送请求设置位
    Uint16      TRS1:1;     // 1   邮箱1发送请求设置位
    Uint16      TRS2:1;     // 2   邮箱2发送请求设置位
    Uint16      TRS3:1;     // 3   邮箱3发送请求设置位
    Uint16      TRS4:1;     // 4   邮箱4发送请求设置位
    Uint16      TRS5:1;     // 5   邮箱5发送请求设置位
    Uint16      TRS6:1;     // 6   邮箱6发送请求设置位
    Uint16      TRS7:1;     // 7   邮箱7发送请求设置位
    Uint16      TRS8:1;     // 8   邮箱8发送请求设置位
    Uint16      TRS9:1;     // 9   邮箱9发送请求设置位
    Uint16      TRS10:1;    // 10  邮箱10发送请求设置位
    Uint16      TRS11:1;    // 11  邮箱11发送请求设置位
    Uint16      TRS12:1;    // 12  邮箱12发送请求设置位
    Uint16      TRS13:1;    // 13  邮箱13发送请求设置位
    Uint16      TRS14:1;    // 14  邮箱14发送请求设置位
    Uint16      TRS15:1;    // 15  邮箱15发送请求设置位
    Uint16      TRS16:1;    // 16  邮箱16发送请求设置位
    Uint16      TRS17:1;    // 17  邮箱17发送请求设置位
    Uint16      TRS18:1;    // 18  邮箱18发送请求设置位
    Uint16      TRS19:1;    // 19  邮箱19发送请求设置位
    Uint16      TRS20:1;    // 20  邮箱20发送请求设置位
    Uint16      TRS21:1;    // 21  邮箱21发送请求设置位
    Uint16      TRS22:1;    // 22  邮箱22发送请求设置位
    Uint16      TRS23:1;    // 23  邮箱23发送请求设置位
    Uint16      TRS24:1;    // 24  邮箱24发送请求设置位
    Uint16      TRS25:1;    // 25  邮箱25发送请求设置位
    Uint16      TRS26:1;    // 26  邮箱26发送请求设置位
    Uint16      TRS27:1;    // 27  邮箱27发送请求设置位
    Uint16      TRS28:1;    // 28  邮箱28发送请求设置位
    Uint16      TRS29:1;    // 29  邮箱29发送请求设置位
    Uint16      TRS30:1;    // 30  邮箱30发送请求设置位
    Uint16      TRS31:1;    // 31  邮箱31发送请求设置位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTRS_REG {
    Uint32              all;
    struct CANTRS_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送请求复位寄存器(CANTRR)位定义 */
struct  CANTRR_BITS {       // 位描述
    Uint16      TRR0:1;     // 0   邮箱0发送请求复位位
    Uint16      TRR1:1;     // 1   邮箱1发送请求复位位
    Uint16      TRR2:1;     // 2   邮箱2发送请求复位位
    Uint16      TRR3:1;     // 3   邮箱3发送请求复位位
    Uint16      TRR4:1;     // 4   邮箱4发送请求复位位
    Uint16      TRR5:1;     // 5   邮箱5发送请求复位位
    Uint16      TRR6:1;     // 6   邮箱6发送请求复位位
    Uint16      TRR7:1;     // 7   邮箱7发送请求复位位
    Uint16      TRR8:1;     // 8   邮箱8发送请求复位位
    Uint16      TRR9:1;     // 9   邮箱9发送请求复位位
    Uint16      TRR10:1;    // 10  邮箱10发送请求复位位
    Uint16      TRR11:1;    // 11  邮箱11发送请求复位位
    Uint16      TRR12:1;    // 12  邮箱12发送请求复位位
    Uint16      TRR13:1;    // 13  邮箱13发送请求复位位
    Uint16      TRR14:1;    // 14  邮箱14发送请求复位位
    Uint16      TRR15:1;    // 15  邮箱15发送请求复位位
    Uint16      TRR16:1;    // 16  邮箱16发送请求复位位
    Uint16      TRR17:1;    // 17  邮箱17发送请求复位位
    Uint16      TRR18:1;    // 18  邮箱18发送请求复位位
    Uint16      TRR19:1;    // 19  邮箱19发送请求复位位
    Uint16      TRR20:1;    // 20  邮箱20发送请求复位位
    Uint16      TRR21:1;    // 21  邮箱21发送请求复位位
    Uint16      TRR22:1;    // 22  邮箱22发送请求复位位
    Uint16      TRR23:1;    // 23  邮箱23发送请求复位位
    Uint16      TRR24:1;    // 24  邮箱24发送请求复位位
    Uint16      TRR25:1;    // 25  邮箱25发送请求复位位
    Uint16      TRR26:1;    // 26  邮箱26发送请求复位位
    Uint16      TRR27:1;    // 27  邮箱27发送请求复位位
    Uint16      TRR28:1;    // 28  邮箱28发送请求复位位
    Uint16      TRR29:1;    // 29  邮箱29发送请求复位位
    Uint16      TRR30:1;    // 30  邮箱30发送请求复位位
    Uint16      TRR31:1;    // 31  邮箱31发送请求复位位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTRR_REG {
    Uint32              all;
    struct CANTRR_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送成功确认寄存器(CANTA)位定义 */
struct  CANTA_BITS {        // 位描述
    Uint16      TA0:1;      // 0   邮箱0发送成功确认位
    Uint16      TA1:1;      // 1   邮箱1发送成功确认位
    Uint16      TA2:1;      // 2   邮箱2发送成功确认位
    Uint16      TA3:1;      // 3   邮箱3发送成功确认位
    Uint16      TA4:1;      // 4   邮箱4发送成功确认位
    Uint16      TA5:1;      // 5   邮箱5发送成功确认位
    Uint16      TA6:1;      // 6   邮箱6发送成功确认位
    Uint16      TA7:1;      // 7   邮箱7发送成功确认位
    Uint16      TA8:1;      // 8   邮箱8发送成功确认位
    Uint16      TA9:1;      // 9   邮箱9发送成功确认位
    Uint16      TA10:1;     // 10  邮箱10发送成功确认位
    Uint16      TA11:1;     // 11  邮箱11发送成功确认位
    Uint16      TA12:1;     // 12  邮箱12发送成功确认位
    Uint16      TA13:1;     // 13  邮箱13发送成功确认位
    Uint16      TA14:1;     // 14  邮箱14发送成功确认位
    Uint16      TA15:1;     // 15  邮箱15发送成功确认位
    Uint16      TA16:1;     // 16  邮箱16发送成功确认位
    Uint16      TA17:1;     // 17  邮箱17发送成功确认位
    Uint16      TA18:1;     // 18  邮箱18发送成功确认位
    Uint16      TA19:1;     // 19  邮箱19发送成功确认位
    Uint16      TA20:1;     // 20  邮箱20发送成功确认位
    Uint16      TA21:1;     // 21  邮箱21发送成功确认位
    Uint16      TA22:1;     // 22  邮箱22发送成功确认位
    Uint16      TA23:1;     // 23  邮箱23发送成功确认位
    Uint16      TA24:1;     // 24  邮箱24发送成功确认位
    Uint16      TA25:1;     // 25  邮箱25发送成功确认位
    Uint16      TA26:1;     // 26  邮箱26发送成功确认位
    Uint16      TA27:1;     // 27  邮箱27发送成功确认位
    Uint16      TA28:1;     // 28  邮箱28发送成功确认位
    Uint16      TA29:1;     // 29  邮箱29发送成功确认位
    Uint16      TA30:1;     // 30  邮箱30发送成功确认位
    Uint16      TA31:1;     // 31  邮箱31发送成功确认位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTA_REG {
    Uint32             all;
    struct CANTA_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送失败确认寄存器(CANAA)位定义 */
struct  CANAA_BITS {        // 位描述
    Uint16      AA0:1;      // 0   邮箱0发送失败确认位
    Uint16      AA1:1;      // 1   邮箱1发送失败确认位
    Uint16      AA2:1;      // 2   邮箱2发送失败确认位
    Uint16      AA3:1;      // 3   邮箱3发送失败确认位
    Uint16      AA4:1;      // 4   邮箱4发送失败确认位
    Uint16      AA5:1;      // 5   邮箱5发送失败确认位
    Uint16      AA6:1;      // 6   邮箱6发送失败确认位
    Uint16      AA7:1;      // 7   邮箱7发送失败确认位
    Uint16      AA8:1;      // 8   邮箱8发送失败确认位
    Uint16      AA9:1;      // 9   邮箱9发送失败确认位
    Uint16      AA10:1;     // 10  邮箱10发送失败确认位
    Uint16      AA11:1;     // 11  邮箱11发送失败确认位
    Uint16      AA12:1;     // 12  邮箱12发送失败确认位
    Uint16      AA13:1;     // 13  邮箱13发送失败确认位
    Uint16      AA14:1;     // 14  邮箱14发送失败确认位
    Uint16      AA15:1;     // 15  邮箱15发送失败确认位
    Uint16      AA16:1;     // 16  邮箱16发送失败确认位
    Uint16      AA17:1;     // 17  邮箱17发送失败确认位
    Uint16      AA18:1;     // 18  邮箱18发送失败确认位
    Uint16      AA19:1;     // 19  邮箱19发送失败确认位
    Uint16      AA20:1;     // 20  邮箱20发送失败确认位
    Uint16      AA21:1;     // 21  邮箱21发送失败确认位
    Uint16      AA22:1;     // 22  邮箱22发送失败确认位
    Uint16      AA23:1;     // 23  邮箱23发送失败确认位
    Uint16      AA24:1;     // 24  邮箱24发送失败确认位
    Uint16      AA25:1;     // 25  邮箱25发送失败确认位
    Uint16      AA26:1;     // 26  邮箱26发送失败确认位
    Uint16      AA27:1;     // 27  邮箱27发送失败确认位
    Uint16      AA28:1;     // 28  邮箱28发送失败确认位
    Uint16      AA29:1;     // 29  邮箱29发送失败确认位
    Uint16      AA30:1;     // 30  邮箱30发送失败确认位
    Uint16      AA31:1;     // 31  邮箱31发送失败确认位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANAA_REG {
    Uint32             all;
    struct CANAA_BITS  bit;
};

//----------------------------------------------------
/* eCAN接收消息挂起寄存器(CANRMP)位定义 */
struct  CANRMP_BITS {       // 位描述
    Uint16      RMP0:1;     // 0   邮箱0接收消息挂起位
    Uint16      RMP1:1;     // 1   邮箱1接收消息挂起位
    Uint16      RMP2:1;     // 2   邮箱2接收消息挂起位
    Uint16      RMP3:1;     // 3   邮箱3接收消息挂起位
    Uint16      RMP4:1;     // 4   邮箱4接收消息挂起位
    Uint16      RMP5:1;     // 5   邮箱5接收消息挂起位
    Uint16      RMP6:1;     // 6   邮箱6接收消息挂起位
    Uint16      RMP7:1;     // 7   邮箱7接收消息挂起位
    Uint16      RMP8:1;     // 8   邮箱8接收消息挂起位
    Uint16      RMP9:1;     // 9   邮箱9接收消息挂起位
    Uint16      RMP10:1;    // 10  邮箱10接收消息挂起位
    Uint16      RMP11:1;    // 11  邮箱11接收消息挂起位
    Uint16      RMP12:1;    // 12  邮箱12接收消息挂起位
    Uint16      RMP13:1;    // 13  邮箱13接收消息挂起位
    Uint16      RMP14:1;    // 14  邮箱14接收消息挂起位
    Uint16      RMP15:1;    // 15  邮箱15接收消息挂起位
    Uint16      RMP16:1;    // 16  邮箱16接收消息挂起位
    Uint16      RMP17:1;    // 17  邮箱17接收消息挂起位
    Uint16      RMP18:1;    // 18  邮箱18接收消息挂起位
    Uint16      RMP19:1;    // 19  邮箱19接收消息挂起位
    Uint16      RMP20:1;    // 20  邮箱20接收消息挂起位
    Uint16      RMP21:1;    // 21  邮箱21接收消息挂起位
    Uint16      RMP22:1;    // 22  邮箱22接收消息挂起位
    Uint16      RMP23:1;    // 23  邮箱23接收消息挂起位
    Uint16      RMP24:1;    // 24  邮箱24接收消息挂起位
    Uint16      RMP25:1;    // 25  邮箱25接收消息挂起位
    Uint16      RMP26:1;    // 26  邮箱26接收消息挂起位
    Uint16      RMP27:1;    // 27  邮箱27接收消息挂起位
    Uint16      RMP28:1;    // 28  邮箱28接收消息挂起位
    Uint16      RMP29:1;    // 29  邮箱29接收消息挂起位
    Uint16      RMP30:1;    // 30  邮箱30接收消息挂起位
    Uint16      RMP31:1;    // 31  邮箱31接收消息挂起位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANRMP_REG {
    Uint32              all;
    struct CANRMP_BITS  bit;
};

//----------------------------------------------------
/* eCAN接收消息丢失寄存器(CANRML)位定义 */
struct  CANRML_BITS {       // 位描述
    Uint16      RML0:1;     // 0   邮箱0是否有接收消息丢失标识位
    Uint16      RML1:1;     // 1   邮箱1是否有接收消息丢失标识位
    Uint16      RML2:1;     // 2   邮箱2是否有接收消息丢失标识位
    Uint16      RML3:1;     // 3   邮箱3是否有接收消息丢失标识位
    Uint16      RML4:1;     // 4   邮箱4是否有接收消息丢失标识位
    Uint16      RML5:1;     // 5   邮箱5是否有接收消息丢失标识位
    Uint16      RML6:1;     // 6   邮箱6是否有接收消息丢失标识位
    Uint16      RML7:1;     // 7   邮箱7是否有接收消息丢失标识位
    Uint16      RML8:1;     // 8   邮箱8是否有接收消息丢失标识位
    Uint16      RML9:1;     // 9   邮箱9是否有接收消息丢失标识位
    Uint16      RML10:1;    // 10  邮箱10是否有接收消息丢失标识位
    Uint16      RML11:1;    // 11  邮箱11是否有接收消息丢失标识位
    Uint16      RML12:1;    // 12  邮箱12是否有接收消息丢失标识位
    Uint16      RML13:1;    // 13  邮箱13是否有接收消息丢失标识位
    Uint16      RML14:1;    // 14  邮箱14是否有接收消息丢失标识位
    Uint16      RML15:1;    // 15  邮箱15是否有接收消息丢失标识位
    Uint16      RML16:1;    // 16  邮箱16是否有接收消息丢失标识位
    Uint16      RML17:1;    // 17  邮箱17是否有接收消息丢失标识位
    Uint16      RML18:1;    // 18  邮箱18是否有接收消息丢失标识位
    Uint16      RML19:1;    // 19  邮箱19是否有接收消息丢失标识位
    Uint16      RML20:1;    // 20  邮箱20是否有接收消息丢失标识位
    Uint16      RML21:1;    // 21  邮箱21是否有接收消息丢失标识位
    Uint16      RML22:1;    // 22  邮箱22是否有接收消息丢失标识位
    Uint16      RML23:1;    // 23  邮箱23是否有接收消息丢失标识位
    Uint16      RML24:1;    // 24  邮箱24是否有接收消息丢失标识位
    Uint16      RML25:1;    // 25  邮箱25是否有接收消息丢失标识位
    Uint16      RML26:1;    // 26  邮箱26是否有接收消息丢失标识位
    Uint16      RML27:1;    // 27  邮箱27是否有接收消息丢失标识位
    Uint16      RML28:1;    // 28  邮箱28是否有接收消息丢失标识位
    Uint16      RML29:1;    // 29  邮箱29是否有接收消息丢失标识位
    Uint16      RML30:1;    // 30  邮箱30是否有接收消息丢失标识位
    Uint16      RML31:1;    // 31  邮箱31是否有接收消息丢失标识位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANRML_REG {
    Uint32              all;
    struct CANRML_BITS  bit;
};

//----------------------------------------------------
/* eCAN远程请求寄存器(CANRFP)位定义 */
struct  CANRFP_BITS {       // 位描述
    Uint16      RFP0:1;     // 0   邮箱0接收到一个远程帧请求标识位
    Uint16      RFP1:1;     // 1   邮箱1接收到一个远程帧请求标识位
    Uint16      RFP2:1;     // 2   邮箱2接收到一个远程帧请求标识位
    Uint16      RFP3:1;     // 3   邮箱3接收到一个远程帧请求标识位
    Uint16      RFP4:1;     // 4   邮箱4接收到一个远程帧请求标识位
    Uint16      RFP5:1;     // 5   邮箱5接收到一个远程帧请求标识位
    Uint16      RFP6:1;     // 6   邮箱6接收到一个远程帧请求标识位
    Uint16      RFP7:1;     // 7   邮箱7接收到一个远程帧请求标识位
    Uint16      RFP8:1;     // 8   邮箱8接收到一个远程帧请求标识位
    Uint16      RFP9:1;     // 9   邮箱9接收到一个远程帧请求标识位
    Uint16      RFP10:1;    // 10  邮箱10接收到一个远程帧请求标识位
    Uint16      RFP11:1;    // 11  邮箱11接收到一个远程帧请求标识位
    Uint16      RFP12:1;    // 12  邮箱12接收到一个远程帧请求标识位
    Uint16      RFP13:1;    // 13  邮箱13接收到一个远程帧请求标识位
    Uint16      RFP14:1;    // 14  邮箱14接收到一个远程帧请求标识位
    Uint16      RFP15:1;    // 15  邮箱15接收到一个远程帧请求标识位
    Uint16      RFP16:1;    // 16  邮箱16接收到一个远程帧请求标识位
    Uint16      RFP17:1;    // 17  邮箱17接收到一个远程帧请求标识位
    Uint16      RFP18:1;    // 18  邮箱18接收到一个远程帧请求标识位
    Uint16      RFP19:1;    // 19  邮箱19接收到一个远程帧请求标识位
    Uint16      RFP20:1;    // 20  邮箱20接收到一个远程帧请求标识位
    Uint16      RFP21:1;    // 21  邮箱21接收到一个远程帧请求标识位
    Uint16      RFP22:1;    // 22  邮箱22接收到一个远程帧请求标识位
    Uint16      RFP23:1;    // 23  邮箱23接收到一个远程帧请求标识位
    Uint16      RFP24:1;    // 24  邮箱24接收到一个远程帧请求标识位
    Uint16      RFP25:1;    // 25  邮箱25接收到一个远程帧请求标识位
    Uint16      RFP26:1;    // 26  邮箱26接收到一个远程帧请求标识位
    Uint16      RFP27:1;    // 27  邮箱27接收到一个远程帧请求标识位
    Uint16      RFP28:1;    // 28  邮箱28接收到一个远程帧请求标识位
    Uint16      RFP29:1;    // 29  邮箱29接收到一个远程帧请求标识位
    Uint16      RFP30:1;    // 30  邮箱30接收到一个远程帧请求标识位
    Uint16      RFP31:1;    // 31  邮箱31接收到一个远程帧请求标识位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANRFP_REG {
    Uint32              all;
    struct CANRFP_BITS  bit;
};

//----------------------------------------------------
/* eCAN全局接收屏蔽寄存器(CANGAM)位定义 */
struct  CANGAM_BITS {       // 位描述
    Uint16 GAM150:16;       // 15:0  全局接收屏蔽位（ bits 0-15）
    Uint16 GAM2816:13;      // 28:16 全局接收屏蔽位（bits 16-28）
    Uint16 rsvd:2;          // 30:29 预留
    Uint16 AMI:1;           // 31    接收屏蔽标识符扩展位
};

//----------------------------------------------------
/* 定义联合体，使得既可以允许访问位字段，也可以访问整个寄存器 */
union CANGAM_REG {
    Uint32              all;
    struct CANGAM_BITS  bit;
};

//----------------------------------------------------
/* eCAN主控制寄存器(CANMC)位定义 */
struct  CANMC_BITS {        // 位描述
    Uint16      MBNR:5;     // 4:0   邮箱号位
    Uint16      SRES:1;     // 5     软件复位位
    Uint16      STM:1;      // 6     自测模式使能位
    Uint16      ABO:1;      // 7     自动总线连接位
    Uint16      CDR:1;      // 8     改变数据区域请求位
    Uint16      WUBA:1;     // 9     总线唤醒位
    Uint16      DBO:1;      // 10    数据字节顺序控制位
    Uint16      PDR:1;      // 11    掉电模式请求位
    Uint16      CCR:1;      // 12    改变配置请求位
    Uint16      SCB:1;      // 13    SCC模式兼容控制位
    Uint16      TCC:1;      // 14    邮箱定时邮递计数器MSB清零位
    Uint16      MBCC:1;     // 15    邮箱定时邮递计数器清零位
    Uint16      SUSP:1;     // 16    暂停模式控制位
    Uint16      rsvd:15;    // 31:17  预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以允许访问位字段，也可以访问整个寄存器 */
union CANMC_REG {
    Uint32             all;
    struct CANMC_BITS  bit;
};

//----------------------------------------------------
/* eCAN位时序配置寄存器(CANBTC)位定义 */
struct  CANBTC_BITS {       // 位描述
    Uint16  TSEG2REG:3;     // 2:0   时段2
    Uint16  TSEG1REG:4;     // 6:3   时段1
    Uint16  SAM:1;          // 7     采样点数设置位
    Uint16  SJWREG:2;       // 9:8   同步跳转宽度控制位
    Uint16  rsvd1:6;        // 15:10 预留
    Uint16  BRPREG:8;       // 23:16 波特率预分频控制位
    Uint16  rsvd2:8;        // 31:24 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANBTC_REG {
    Uint32              all;
    struct CANBTC_BITS  bit;
};

//----------------------------------------------------
/* eCAN错误状态寄存器(CANES)位定义 */
struct  CANES_BITS {        // 位描述
    Uint16   TM:1;          // 0     发送模式位
    Uint16   RM:1;          // 1     接收模式位
    Uint16   rsvd1:1;       // 2     预留
    Uint16   PDA:1;         // 3     掉电响应位
    Uint16   CCE:1;         // 4     改变配置使能位
    Uint16   SMA:1;         // 5     等待模式确认位
    Uint16   rsvd2:10;      // 15:6  预留
    Uint16   EW:1;          // 16    警告状态位
    Uint16   EP:1;          // 17    被动错误状态位
    Uint16   BO:1;          // 18    总线禁止状态位
    Uint16   ACKE:1;        // 19    应答错误标识位
    Uint16   SE:1;          // 20    填充错误标识位
    Uint16   CRCE:1;        // 21    CRC校验错误标识位
    Uint16   SA1:1;         // 22    显性错误标识位
    Uint16   BE:1;          // 23    位错误标识位
    Uint16   FE:1;          // 24    格式错误标识位
    Uint16   rsvd3:7;       // 31:25 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANES_REG {
    Uint32             all;
    struct CANES_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送错误计数寄存器(CANTEC)位定义 */
struct  CANTEC_BITS {       // 位描述
    Uint16 TEC:8;           // 7:0   发送错误计数位
    Uint16 rsvd1:8;         // 15:8  预留
    Uint16 rsvd2:16;        // 31:16 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTEC_REG {
    Uint32              all;
    struct CANTEC_BITS  bit;
};

//----------------------------------------------------
/* eCAN接收错误计数寄存器(CANREC)位定义 */
struct  CANREC_BITS {       // 位描述
    Uint16 REC:8;           // 7:0   接收错误计数位
    Uint16 rsvd1:8;         // 15:8  预留
    Uint16 rsvd2:16;        // 31:16 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANREC_REG {
    Uint32              all;
    struct CANREC_BITS  bit;
};

//----------------------------------------------------
/* eCAN全局中断标志寄存器0(CANGIF0)位定义 */
struct  CANGIF0_BITS {      // 位描述
    Uint16   MIV0:5;        // 4:0   邮箱中断向量
    Uint16   rsvd1:3;       // 7:5   预留
    Uint16   WLIF0:1;       // 8     警告级别中断标志位
    Uint16   EPIF0:1;       // 9     被动错误中断标志位
    Uint16   BOIF0:1;       // 10    总线禁止中断标志位
    Uint16   RMLIF0:1;      // 11    接收消息丢失中断标志位
    Uint16   WUIF0:1;       // 12    唤醒中断标志位
    Uint16   WDIF0:1;       // 13    写拒绝中断标志位
    Uint16   AAIF0:1;       // 14    应答失败中断标志位
    Uint16   GMIF0:1;       // 15    全局邮箱中断标志位
    Uint16   TCOF0:1;       // 16    定时邮递计数器溢出中断标志位
    Uint16   MTOF0:1;       // 17    邮箱超时中断标志位
    Uint16   rsvd2:14;      // 31:18 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANGIF0_REG {
    Uint32               all;
    struct CANGIF0_BITS  bit;
};

//----------------------------------------------------
/* eCAN全局中断标志寄存器1(eCANGIF1)位定义 */
struct  CANGIF1_BITS {      // 位描述
    Uint16      MIV1:5;     // 4:0   邮箱中断向量
    Uint16      rsvd1:3;    // 7:5   预留
    Uint16      WLIF1:1;    // 8     警告级别中断标志位
    Uint16      EPIF1:1;    // 9     被动错误中断标志位
    Uint16      BOIF1:1;    // 10    总线禁止中断标志位
    Uint16      RMLIF1:1;   // 11    接收消息丢失中断标志位
    Uint16      WUIF1:1;    // 12    唤醒中断标志位
    Uint16      WDIF1:1;    // 13    写拒绝中断标志位
    Uint16      AAIF1:1;    // 14    应答失败中断标志位
    Uint16      GMIF1:1;    // 15    全局邮箱中断标志位
    Uint16      TCOF1:1;    // 16    定时邮递计数器溢出中断标志位
    Uint16      MTOF1:1;    // 17    邮箱超时中断标志位
    Uint16      rsvd2:14;   // 31:18 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANGIF1_REG {
    Uint32               all;
    struct CANGIF1_BITS  bit;
};

//----------------------------------------------------
/* eCAN全局中断屏蔽寄存器(CANGIM)位定义 */
struct  CANGIM_BITS {       // 位描述
    Uint16  I0EN:1;         // 0      中断0使能位
    Uint16  I1EN:1;         // 1      中断1使能位
    Uint16  GIL:1;          // 2      中断TCOF、WDIF、WUIF、BOIF、EPIF、WLIF的全局中断级
    Uint16  rsvd1:5;        // 7:3    预留
    Uint16  WLIM:1;         // 8      警告标志中断屏蔽位
    Uint16  EPIM:1;         // 9      被动错误中断屏蔽位
    Uint16  BOIM:1;         // 10     总线禁止中断屏蔽位
    Uint16  RMLIM:1;        // 11     接收消息丢失中断屏蔽位
    Uint16  WUIM:1;         // 12     唤醒中断屏蔽位
    Uint16  WDIM:1;         // 13     写拒绝中断屏蔽位
    Uint16  AAIM:1;         // 14     应答失败中断屏蔽位
    Uint16  rsvd2:1;        // 15     预留
    Uint16  TCOM:1;         // 16     定时邮递计数器溢出中断屏蔽位
    Uint16  MTOM:1;         // 17     邮箱超时中断屏蔽位
    Uint16  rsvd3:14;       // 31:18  预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANGIM_REG {
    Uint32              all;
    struct CANGIM_BITS  bit;
};

//----------------------------------------------------
/* eCAN邮箱中断屏蔽寄存器(CANMIM)位定义 */
struct  CANMIM_BITS {       // 位描述
    Uint16      MIM0:1;     // 0   邮箱0中断屏蔽位
    Uint16      MIM1:1;     // 1   邮箱1中断屏蔽位
    Uint16      MIM2:1;     // 2   邮箱2中断屏蔽位
    Uint16      MIM3:1;     // 3   邮箱3中断屏蔽位
    Uint16      MIM4:1;     // 4   邮箱4中断屏蔽位
    Uint16      MIM5:1;     // 5   邮箱5中断屏蔽位
    Uint16      MIM6:1;     // 6   邮箱6中断屏蔽位
    Uint16      MIM7:1;     // 7   邮箱7中断屏蔽位
    Uint16      MIM8:1;     // 8   邮箱8中断屏蔽位
    Uint16      MIM9:1;     // 9   邮箱9中断屏蔽位
    Uint16      MIM10:1;    // 10  邮箱10中断屏蔽位
    Uint16      MIM11:1;    // 11  邮箱11中断屏蔽位
    Uint16      MIM12:1;    // 12  邮箱12中断屏蔽位
    Uint16      MIM13:1;    // 13  邮箱13中断屏蔽位
    Uint16      MIM14:1;    // 14  邮箱14中断屏蔽位
    Uint16      MIM15:1;    // 15  邮箱15中断屏蔽位
    Uint16      MIM16:1;    // 16  邮箱16中断屏蔽位
    Uint16      MIM17:1;    // 17  邮箱17中断屏蔽位
    Uint16      MIM18:1;    // 18  邮箱18中断屏蔽位
    Uint16      MIM19:1;    // 19  邮箱19中断屏蔽位
    Uint16      MIM20:1;    // 20  邮箱20中断屏蔽位
    Uint16      MIM21:1;    // 21  邮箱21中断屏蔽位
    Uint16      MIM22:1;    // 22  邮箱22中断屏蔽位
    Uint16      MIM23:1;    // 23  邮箱23中断屏蔽位
    Uint16      MIM24:1;    // 24  邮箱24中断屏蔽位
    Uint16      MIM25:1;    // 25  邮箱25中断屏蔽位
    Uint16      MIM26:1;    // 26  邮箱26中断屏蔽位
    Uint16      MIM27:1;    // 27  邮箱27中断屏蔽位
    Uint16      MIM28:1;    // 28  邮箱28中断屏蔽位
    Uint16      MIM29:1;    // 29  邮箱29中断屏蔽位
    Uint16      MIM30:1;    // 30  邮箱30中断屏蔽位
    Uint16      MIM31:1;    // 31  邮箱31中断屏蔽位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMIM_REG {
    Uint32              all;
    struct CANMIM_BITS  bit;
};

//----------------------------------------------------
/* eCAN邮箱中断级别设置寄存器(CANMIL)位定义 */
struct  CANMIL_BITS {       // 位描述
    Uint16      MIL0:1;     // 0   邮箱0的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL1:1;     // 1   邮箱1的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL2:1;     // 2   邮箱2的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL3:1;     // 3   邮箱3的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL4:1;     // 4   邮箱4的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL5:1;     // 5   邮箱5的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL6:1;     // 6   邮箱6的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL7:1;     // 7   邮箱7的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL8:1;     // 8   邮箱8的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL9:1;     // 9   邮箱9的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL10:1;    // 10  邮箱10的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL11:1;    // 11  邮箱11的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL12:1;    // 12  邮箱12的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL13:1;    // 13  邮箱13的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL14:1;    // 14  邮箱14的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL15:1;    // 15  邮箱15的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL16:1;    // 16  邮箱16的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL17:1;    // 17  邮箱17的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL18:1;    // 18  邮箱18的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL19:1;    // 19  邮箱19的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL20:1;    // 20  邮箱20的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL21:1;    // 21  邮箱21的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL22:1;    // 22  邮箱22的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL23:1;    // 23  邮箱23的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL24:1;    // 24  邮箱24的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL25:1;    // 25  邮箱25的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL26:1;    // 26  邮箱26的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL27:1;    // 27  邮箱27的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL28:1;    // 28  邮箱28的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL29:1;    // 29  邮箱29的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL30:1;    // 30  邮箱30的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
    Uint16      MIL31:1;    // 31  邮箱31的中断级别设置位：0-中断产生在中断线路0上；1-中断产生在中断线路1上
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMIL_REG {
    Uint32              all;
    struct CANMIL_BITS  bit;
};

//----------------------------------------------------
/* eCAN覆盖保护控制寄存器(CANOPC)位定义 */
struct  CANOPC_BITS {       // 位描述
    Uint16      OPC0:1;     // 0   邮箱0消息保护控制位
    Uint16      OPC1:1;     // 1   邮箱1消息保护控制位
    Uint16      OPC2:1;     // 2   邮箱2消息保护控制位
    Uint16      OPC3:1;     // 3   邮箱3消息保护控制位
    Uint16      OPC4:1;     // 4   邮箱4消息保护控制位
    Uint16      OPC5:1;     // 5   邮箱5消息保护控制位
    Uint16      OPC6:1;     // 6   邮箱6消息保护控制位
    Uint16      OPC7:1;     // 7   邮箱7消息保护控制位
    Uint16      OPC8:1;     // 8   邮箱8消息保护控制位
    Uint16      OPC9:1;     // 9   邮箱9消息保护控制位
    Uint16      OPC10:1;    // 10  邮箱10消息保护控制位
    Uint16      OPC11:1;    // 11  邮箱11消息保护控制位
    Uint16      OPC12:1;    // 12  邮箱12消息保护控制位
    Uint16      OPC13:1;    // 13  邮箱13消息保护控制位
    Uint16      OPC14:1;    // 14  邮箱14消息保护控制位
    Uint16      OPC15:1;    // 15  邮箱15消息保护控制位
    Uint16      OPC16:1;    // 16  邮箱16消息保护控制位
    Uint16      OPC17:1;    // 17  邮箱17消息保护控制位
    Uint16      OPC18:1;    // 18  邮箱18消息保护控制位
    Uint16      OPC19:1;    // 19  邮箱19消息保护控制位
    Uint16      OPC20:1;    // 20  邮箱20消息保护控制位
    Uint16      OPC21:1;    // 21  邮箱21消息保护控制位
    Uint16      OPC22:1;    // 22  邮箱22消息保护控制位
    Uint16      OPC23:1;    // 23  邮箱23消息保护控制位
    Uint16      OPC24:1;    // 24  邮箱24消息保护控制位
    Uint16      OPC25:1;    // 25  邮箱25消息保护控制位
    Uint16      OPC26:1;    // 26  邮箱26消息保护控制位
    Uint16      OPC27:1;    // 27  邮箱27消息保护控制位
    Uint16      OPC28:1;    // 28  邮箱28消息保护控制位
    Uint16      OPC29:1;    // 29  邮箱29消息保护控制位
    Uint16      OPC30:1;    // 30  邮箱30消息保护控制位
    Uint16      OPC31:1;    // 31  邮箱31消息保护控制位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANOPC_REG {
    Uint32              all;
    struct CANOPC_BITS  bit;
};

//----------------------------------------------------
/* eCAN发送引脚IO配置寄存器(CANTIOC)位定义 */
struct  CANTIOC_BITS {      // 位描述
    Uint16  rsvd1:3;        // 2:0   预留
    Uint16  TXFUNC:1;       // 3     发送引脚设置位。0：保留；1：CANTX引脚用作CAN发送。
    Uint16  rsvd2:12;       // 15:4  预留
    Uint16  rsvd3:16;       // 31:16 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTIOC_REG {
    Uint32               all;
    struct CANTIOC_BITS  bit;
};

//----------------------------------------------------
/* eCAN接收引脚IO配置寄存器(CANRIOC)位定义 */
struct  CANRIOC_BITS {      // 位描述
    Uint16  rsvd1:3;        // 2:0   预留
    Uint16  RXFUNC:1;       // 3     接收引脚设置位。0：保留；1：CANTX引脚用作CAN接收。
    Uint16  rsvd2:12;       // 15:4  预留
    Uint16  rsvd3:16;       // 31:16 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANRIOC_REG {
    Uint32               all;
    struct CANRIOC_BITS  bit;
};

//----------------------------------------------------
/* eCAN超时控制寄存器(CANTOC)位定义 */
struct  CANTOC_BITS {       // 位描述
    Uint16      TOC0:1;     // 0   邮箱0超时使能位
    Uint16      TOC1:1;     // 1   邮箱1超时使能位
    Uint16      TOC2:1;     // 2   邮箱2超时使能位
    Uint16      TOC3:1;     // 3   邮箱3超时使能位
    Uint16      TOC4:1;     // 4   邮箱4超时使能位
    Uint16      TOC5:1;     // 5   邮箱5超时使能位
    Uint16      TOC6:1;     // 6   邮箱6超时使能位
    Uint16      TOC7:1;     // 7   邮箱7超时使能位
    Uint16      TOC8:1;     // 8   邮箱8超时使能位
    Uint16      TOC9:1;     // 9   邮箱9超时使能位
    Uint16      TOC10:1;    // 10  邮箱10超时使能位
    Uint16      TOC11:1;    // 11  邮箱11超时使能位
    Uint16      TOC12:1;    // 12  邮箱12超时使能位
    Uint16      TOC13:1;    // 13  邮箱13超时使能位
    Uint16      TOC14:1;    // 14  邮箱14超时使能位
    Uint16      TOC15:1;    // 15  邮箱15超时使能位
    Uint16      TOC16:1;    // 16  邮箱16超时使能位
    Uint16      TOC17:1;    // 17  邮箱17超时使能位
    Uint16      TOC18:1;    // 18  邮箱18超时使能位
    Uint16      TOC19:1;    // 19  邮箱19超时使能位
    Uint16      TOC20:1;    // 20  邮箱20超时使能位
    Uint16      TOC21:1;    // 21  邮箱21超时使能位
    Uint16      TOC22:1;    // 22  邮箱22超时使能位
    Uint16      TOC23:1;    // 23  邮箱23超时使能位
    Uint16      TOC24:1;    // 24  邮箱24超时使能位
    Uint16      TOC25:1;    // 25  邮箱25超时使能位
    Uint16      TOC26:1;    // 26  邮箱26超时使能位
    Uint16      TOC27:1;    // 27  邮箱27超时使能位
    Uint16      TOC28:1;    // 28  邮箱28超时使能位
    Uint16      TOC29:1;    // 29  邮箱29超时使能位
    Uint16      TOC30:1;    // 30  邮箱30超时使能位
    Uint16      TOC31:1;    // 31  邮箱31超时使能位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTOC_REG {
    Uint32              all;
    struct CANTOC_BITS  bit;
};

//----------------------------------------------------
/* eCAN超时状态寄存器(CANTOS)位定义 */
struct  CANTOS_BITS {       // 位描述
    Uint16      TOS0:1;     // 0   邮箱0超时状态标识位
    Uint16      TOS1:1;     // 1   邮箱1超时状态标识位
    Uint16      TOS2:1;     // 2   邮箱2超时状态标识位
    Uint16      TOS3:1;     // 3   邮箱3超时状态标识位
    Uint16      TOS4:1;     // 4   邮箱4超时状态标识位
    Uint16      TOS5:1;     // 5   邮箱5超时状态标识位
    Uint16      TOS6:1;     // 6   邮箱6超时状态标识位
    Uint16      TOS7:1;     // 7   邮箱7超时状态标识位
    Uint16      TOS8:1;     // 8   邮箱8超时状态标识位
    Uint16      TOS9:1;     // 9   邮箱9超时状态标识位
    Uint16      TOS10:1;    // 10  邮箱10超时状态标识位
    Uint16      TOS11:1;    // 11  邮箱11超时状态标识位
    Uint16      TOS12:1;    // 12  邮箱12超时状态标识位
    Uint16      TOS13:1;    // 13  邮箱13超时状态标识位
    Uint16      TOS14:1;    // 14  邮箱14超时状态标识位
    Uint16      TOS15:1;    // 15  邮箱15超时状态标识位
    Uint16      TOS16:1;    // 16  邮箱16超时状态标识位
    Uint16      TOS17:1;    // 17  邮箱17超时状态标识位
    Uint16      TOS18:1;    // 18  邮箱18超时状态标识位
    Uint16      TOS19:1;    // 19  邮箱19超时状态标识位
    Uint16      TOS20:1;    // 20  邮箱20超时状态标识位
    Uint16      TOS21:1;    // 21  邮箱21超时状态标识位
    Uint16      TOS22:1;    // 22  邮箱22超时状态标识位
    Uint16      TOS23:1;    // 23  邮箱23超时状态标识位
    Uint16      TOS24:1;    // 24  邮箱24超时状态标识位
    Uint16      TOS25:1;    // 25  邮箱25超时状态标识位
    Uint16      TOS26:1;    // 26  邮箱26超时状态标识位
    Uint16      TOS27:1;    // 27  邮箱27超时状态标识位
    Uint16      TOS28:1;    // 28  邮箱28超时状态标识位
    Uint16      TOS29:1;    // 29  邮箱29超时状态标识位
    Uint16      TOS30:1;    // 30  邮箱30超时状态标识位
    Uint16      TOS31:1;    // 31  邮箱31超时状态标识位
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANTOS_REG {
    Uint32              all;
    struct CANTOS_BITS  bit;
};

/**************************************/
/* eCAN控制和状态寄存器文件 */
/**************************************/

struct ECAN_REGS {
    union CANME_REG   CANME;        // 邮箱使能
    union CANMD_REG   CANMD;        // 邮箱方向
    union CANTRS_REG  CANTRS;       // 发送请求设置
    union CANTRR_REG  CANTRR;       // 发送请求复位
    union CANTA_REG   CANTA;        // 发送应答
    union CANAA_REG   CANAA;        // 发送失败确认
    union CANRMP_REG  CANRMP;       // 接收消息挂起
    union CANRML_REG  CANRML;       // 接收消息丢失
    union CANRFP_REG  CANRFP;       // 远程帧挂起
    union CANGAM_REG  CANGAM;       // 全局接收屏蔽
    union CANMC_REG   CANMC;        // 主控制
    union CANBTC_REG  CANBTC;       // 位定时
    union CANES_REG   CANES;        // 错误状态
    union CANTEC_REG  CANTEC;       // 发送错误计数
    union CANREC_REG  CANREC;       // 接收错误计数
    union CANGIF0_REG CANGIF0;      // eCAN全局中断标志0
    union CANGIM_REG  CANGIM;       // eCAN全局中断屏蔽0
    union CANGIF1_REG CANGIF1;      // eCAN全局中断标志1
    union CANMIM_REG  CANMIM;       // 邮箱中断屏蔽
    union CANMIL_REG  CANMIL;       // 邮箱中断级别
    union CANOPC_REG  CANOPC;       // 覆盖保护控制
    union CANTIOC_REG CANTIOC;      // CAN发送IO配置
    union CANRIOC_REG CANRIOC;      // CAN接收IO配置
    Uint32            CANTSC;       // 时间戳计数器
    union CANTOC_REG  CANTOC;       // 超时控制
    union CANTOS_REG  CANTOS;       // 超时状态
};

/* --------------------------------------------------- */
/* eCAN邮箱寄存器                              */
/* ----------------------------------------------------*/

//----------------------------------------------------
/* eCAN消息ID寄存器(MSGID)位控制 */
struct  CANMSGID_BITS {             // 位描述
    Uint16      EXTMSGID_L:16;      // 0:15     消息标识符（bit0-15）
    Uint16      EXTMSGID_H:2;       // 16:17    消息标识符（bit16-17）
    Uint16      STDMSGID:11;        // 18:28    消息标识符（bit18-28）
    Uint16      AAM:1;              // 29       自动应答模式位
    Uint16      AME:1;              // 30       接收屏蔽使能位
    Uint16      IDE:1;              // 31       标识符扩展为
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMSGID_REG {
    Uint32                all;
    struct CANMSGID_BITS  bit;
};

//----------------------------------------------------
/* eCAN消息控制寄存器(MSGCTRL)位定义 */
struct  CANMSGCTRL_BITS {           // 位描述
    Uint16      DLC:4;              // 0:3   数据长度位
    Uint16      RTR:1;              // 4     远程发送请求位
    Uint16      rsvd1:3;            // 7:5   预留
    Uint16      TPL:5;              // 12:8  发送优先级控制位
    Uint16      rsvd2:3;            // 15:13 预留
    Uint16      rsvd3:16;           // 31:16 预留
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMSGCTRL_REG {
    Uint32                  all;
    struct CANMSGCTRL_BITS  bit;
};

//----------------------------------------------------
/* eCAN消息数据寄存器低(MDR_L)字定义 */
struct  CANMDL_WORDS {              // 位描述
    Uint16      LOW_WORD:16;        // 0:15
    Uint16      HI_WORD:16;         // 31:16
};

//----------------------------------------------------
/* eCAN消息数据寄存器低(MDR_L)字节定义 */
struct  CANMDL_BYTES {              // 位描述
    Uint16      BYTE3:8;            // 31:24
    Uint16      BYTE2:8;            // 23:16
    Uint16      BYTE1:8;            // 15:8
    Uint16      BYTE0:8;            // 7:0
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMDL_REG {
    Uint32                all;
    struct CANMDL_WORDS   word;
    struct CANMDL_BYTES   byte;
};

//----------------------------------------------------
/* eCAN消息数据寄存器高(MDR_H)字定义 */
struct  CANMDH_WORDS {              // 位描述
    Uint16      LOW_WORD:16;        // 0:15
    Uint16      HI_WORD:16;         // 31:16
};

//----------------------------------------------------
/* eCAN消息数据寄存器高(MDR_H)字节定义 */
struct  CANMDH_BYTES {              // 位描述
    Uint16      BYTE7:8;            // 63:56
    Uint16      BYTE6:8;            // 55:48
    Uint16      BYTE5:8;            // 47:40
    Uint16      BYTE4:8;            // 39:32
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANMDH_REG {
    Uint32                  all;
    struct CANMDH_WORDS     word;
    struct CANMDH_BYTES     byte;
};

struct MBOX {
   union CANMSGID_REG     MSGID;
   union CANMSGCTRL_REG   MSGCTRL;
   union CANMDL_REG       MDL;
   union CANMDH_REG       MDH;
};

/**************************************/
/*          eCAN邮箱                                                          */
/**************************************/

struct ECAN_MBOXES {
   struct MBOX MBOX0;
   struct MBOX MBOX1;
   struct MBOX MBOX2;
   struct MBOX MBOX3;
   struct MBOX MBOX4;
   struct MBOX MBOX5;
   struct MBOX MBOX6;
   struct MBOX MBOX7;
   struct MBOX MBOX8;
   struct MBOX MBOX9;
   struct MBOX MBOX10;
   struct MBOX MBOX11;
   struct MBOX MBOX12;
   struct MBOX MBOX13;
   struct MBOX MBOX14;
   struct MBOX MBOX15;
   struct MBOX MBOX16;
   struct MBOX MBOX17;
   struct MBOX MBOX18;
   struct MBOX MBOX19;
   struct MBOX MBOX20;
   struct MBOX MBOX21;
   struct MBOX MBOX22;
   struct MBOX MBOX23;
   struct MBOX MBOX24;
   struct MBOX MBOX25;
   struct MBOX MBOX26;
   struct MBOX MBOX27;
   struct MBOX MBOX28;
   struct MBOX MBOX29;
   struct MBOX MBOX30;
   struct MBOX MBOX31;
};

//----------------------------------------------------
/* eCAN本地接收屏蔽寄存器(LAM)位定义 */
struct  CANLAM_BITS {               // 位描述
    Uint16      LAM_L:16;           // 0:15     本地接收屏蔽位（低）
    Uint16      LAM_H:13;           // 16:28    本地接收屏蔽位（高）
    Uint16      rsvd1:2;            // 29:30    预留
    Uint16      LAMI:1;             // 31
};

//----------------------------------------------------
/* 定义联合体，使得既可以访问寄存器的位，也可以访问整个寄存器 */
union CANLAM_REG {
   Uint32        all;
   struct CANLAM_BITS  bit;
};


/**************************************/
/*    eCAN本地接收屏蔽                                                            */
/**************************************/

//----------------------------------------------------
/* eCAN LAM 文件 */
struct LAM_REGS {
   union CANLAM_REG LAM0;
   union CANLAM_REG LAM1;
   union CANLAM_REG LAM2;
   union CANLAM_REG LAM3;
   union CANLAM_REG LAM4;
   union CANLAM_REG LAM5;
   union CANLAM_REG LAM6;
   union CANLAM_REG LAM7;
   union CANLAM_REG LAM8;
   union CANLAM_REG LAM9;
   union CANLAM_REG LAM10;
   union CANLAM_REG LAM11;
   union CANLAM_REG LAM12;
   union CANLAM_REG LAM13;
   union CANLAM_REG LAM14;
   union CANLAM_REG LAM15;
   union CANLAM_REG LAM16;
   union CANLAM_REG LAM17;
   union CANLAM_REG LAM18;
   union CANLAM_REG LAM19;
   union CANLAM_REG LAM20;
   union CANLAM_REG LAM21;
   union CANLAM_REG LAM22;
   union CANLAM_REG LAM23;
   union CANLAM_REG LAM24;
   union CANLAM_REG LAM25;
   union CANLAM_REG LAM26;
   union CANLAM_REG LAM27;
   union CANLAM_REG LAM28;
   union CANLAM_REG LAM29;
   union CANLAM_REG LAM30;
   union CANLAM_REG LAM31;
};

//----------------------------------------------------
/* 邮箱   MOTS 文件 */

struct MOTS_REGS {
   Uint32 MOTS0;
   Uint32 MOTS1;
   Uint32 MOTS2;
   Uint32 MOTS3;
   Uint32 MOTS4;
   Uint32 MOTS5;
   Uint32 MOTS6;
   Uint32 MOTS7;
   Uint32 MOTS8;
   Uint32 MOTS9;
   Uint32 MOTS10;
   Uint32 MOTS11;
   Uint32 MOTS12;
   Uint32 MOTS13;
   Uint32 MOTS14;
   Uint32 MOTS15;
   Uint32 MOTS16;
   Uint32 MOTS17;
   Uint32 MOTS18;
   Uint32 MOTS19;
   Uint32 MOTS20;
   Uint32 MOTS21;
   Uint32 MOTS22;
   Uint32 MOTS23;
   Uint32 MOTS24;
   Uint32 MOTS25;
   Uint32 MOTS26;
   Uint32 MOTS27;
   Uint32 MOTS28;
   Uint32 MOTS29;
   Uint32 MOTS30;
   Uint32 MOTS31;
};

//----------------------------------------------------
/* 邮箱  MOTO 文件 */

struct MOTO_REGS {
   Uint32 MOTO0;
   Uint32 MOTO1;
   Uint32 MOTO2;
   Uint32 MOTO3;
   Uint32 MOTO4;
   Uint32 MOTO5;
   Uint32 MOTO6;
   Uint32 MOTO7;
   Uint32 MOTO8;
   Uint32 MOTO9;
   Uint32 MOTO10;
   Uint32 MOTO11;
   Uint32 MOTO12;
   Uint32 MOTO13;
   Uint32 MOTO14;
   Uint32 MOTO15;
   Uint32 MOTO16;
   Uint32 MOTO17;
   Uint32 MOTO18;
   Uint32 MOTO19;
   Uint32 MOTO20;
   Uint32 MOTO21;
   Uint32 MOTO22;
   Uint32 MOTO23;
   Uint32 MOTO24;
   Uint32 MOTO25;
   Uint32 MOTO26;
   Uint32 MOTO27;
   Uint32 MOTO28;
   Uint32 MOTO29;
   Uint32 MOTO30;
   Uint32 MOTO31;
};


//---------------------------------------------------------------------------
// eCAN外部引用和函数声明:
//
extern volatile struct ECAN_REGS ECanaRegs;
extern volatile struct ECAN_MBOXES ECanaMboxes;
extern volatile struct LAM_REGS ECanaLAMRegs;
extern volatile struct MOTO_REGS ECanaMOTORegs;
extern volatile struct MOTS_REGS ECanaMOTSRegs;

extern volatile struct ECAN_REGS ECanbRegs;
extern volatile struct ECAN_MBOXES ECanbMboxes;
extern volatile struct LAM_REGS ECanbLAMRegs;
extern volatile struct MOTO_REGS ECanbMOTORegs;
extern volatile struct MOTS_REGS ECanbMOTSRegs;

#ifdef __cplusplus
}
#endif /* extern "C" */

#endif  // end of AVP33x_ECAN.H definition

//===========================================================================
// End of file.
//===========================================================================
